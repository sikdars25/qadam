COSMOS DB USAGE STRATEGY
========================

IMPORTANT: Not all endpoints should use Cosmos DB!
==================================================


ENDPOINTS USING COSMOS DB:
===========================

‚úÖ User Operations (Cosmos DB Primary)
---------------------------------------
- POST /api/login
- POST /api/register

Reason: Single user lookup, perfect for Cosmos DB partition key


‚úÖ Question Bank (Cosmos DB Primary)
-------------------------------------
- GET /api/question-bank (user's questions only)
- DELETE /api/question-bank/<id>

Reason: Partitioned by user_id, efficient queries


‚úÖ Delete Operations (Cosmos DB Primary)
-----------------------------------------
- DELETE /api/delete-paper/<id>
- DELETE /api/delete-textbook/<id>

Reason: Single document deletion by ID


ENDPOINTS USING MYSQL ONLY:
============================

‚ùå Papers GET (MySQL Only)
---------------------------
- GET /api/uploaded-papers

Reason:
- Returns ALL papers (not just user's papers)
- Needs LEFT JOIN with users table for uploaded_by_name
- Cosmos DB get_user_papers() only returns specific user's papers
- Would require cross-partition query in Cosmos DB (expensive)

Original MySQL Query:
```sql
SELECT p.*, u.full_name as uploaded_by_name 
FROM uploaded_papers p
LEFT JOIN users u ON p.user_id = u.id
ORDER BY p.created_at DESC
```


‚ùå Textbooks GET (MySQL Only)
------------------------------
- GET /api/textbooks

Reason:
- Returns ALL textbooks (not just user's textbooks)
- Needs LEFT JOIN with users table for uploaded_by_name
- Cosmos DB get_textbooks_by_subject() doesn't include user info
- Would require cross-partition query in Cosmos DB (expensive)

Original MySQL Query:
```sql
SELECT t.*, u.full_name as uploaded_by_name 
FROM textbooks t
LEFT JOIN users u ON t.user_id = u.id
WHERE t.subject = ? OR 1=1
ORDER BY t.created_at DESC
```


WHY THIS MATTERS:
=================

Problem with Cosmos DB for these endpoints:
--------------------------------------------

1. Cross-Partition Queries:
   - Cosmos DB is optimized for single-partition queries
   - Querying ALL papers/textbooks requires cross-partition query
   - Much slower and more expensive than MySQL

2. No JOIN Support:
   - Cosmos DB doesn't support JOIN operations
   - Would need to:
     a. Query all papers/textbooks
     b. Query users separately
     c. Merge results in application code
   - Much slower than MySQL JOIN

3. Data Model Mismatch:
   - Papers partitioned by user_id
   - Textbooks partitioned by subject
   - But we need ALL records regardless of partition
   - MySQL is better suited for this


COSMOS DB USAGE SUMMARY:
=========================

Use Cosmos DB When:
-------------------
‚úÖ Single user operations (login, register)
‚úÖ User-specific data (user's questions)
‚úÖ Single document operations (delete by ID)
‚úÖ Partition key is known

Use MySQL When:
---------------
‚úÖ Need ALL records across users
‚úÖ Need JOIN operations
‚úÖ Cross-partition queries required
‚úÖ Complex filtering and sorting


CURRENT IMPLEMENTATION:
=======================

Endpoints Using Cosmos DB:
---------------------------
1. POST /api/login
   - get_user_by_username(username)
   - Falls back to MySQL

2. POST /api/register
   - create_user(...)
   - Falls back to MySQL

3. GET /api/question-bank
   - get_user_questions(user_id)
   - Falls back to MySQL

4. DELETE /api/question-bank/<id>
   - delete_question(question_id, user_id)
   - Falls back to MySQL

5. DELETE /api/delete-paper/<id>
   - delete_paper(paper_id, user_id)
   - Falls back to MySQL

6. DELETE /api/delete-textbook/<id>
   - delete_textbook(textbook_id, subject)
   - Falls back to MySQL


Endpoints Using MySQL Only:
----------------------------
1. GET /api/uploaded-papers
   - Always MySQL
   - Returns ALL papers with user info

2. GET /api/textbooks
   - Always MySQL
   - Returns ALL textbooks with user info


BENEFITS OF THIS APPROACH:
===========================

‚úÖ Performance:
   - Cosmos DB for single-user queries (fast)
   - MySQL for cross-user queries (efficient JOINs)

‚úÖ Cost:
   - Avoid expensive cross-partition queries in Cosmos DB
   - Use MySQL for complex queries (already paid for)

‚úÖ Simplicity:
   - No need to merge data from multiple Cosmos DB queries
   - MySQL handles JOINs natively

‚úÖ Reliability:
   - MySQL fallback for all Cosmos DB operations
   - Always works even if Cosmos DB is down


FUTURE IMPROVEMENTS:
====================

If we want to use Cosmos DB for papers/textbooks GET:
------------------------------------------------------

Option 1: Denormalize Data
---------------------------
Store user info directly in paper/textbook documents:
```json
{
  "id": "paper-123",
  "title": "Physics Sample Paper",
  "user_id": "user-456",
  "uploaded_by_name": "John Doe",  // Denormalized
  ...
}
```

Pros: Single query, no JOIN needed
Cons: Data duplication, update complexity


Option 2: Application-Level JOIN
---------------------------------
1. Query all papers/textbooks from Cosmos DB
2. Extract unique user_ids
3. Query users by IDs
4. Merge in application code

Pros: No data duplication
Cons: Multiple queries, slower, more complex


Option 3: Keep Using MySQL
---------------------------
Current approach - use MySQL for these endpoints

Pros: Simple, fast, reliable
Cons: Not fully migrated to Cosmos DB


RECOMMENDATION:
===============

‚úÖ Keep current approach:
   - Cosmos DB for user-specific operations
   - MySQL for cross-user queries with JOINs

This provides:
- Best performance
- Lowest cost
- Simplest implementation
- Most reliable operation


TESTING:
========

Test Papers Endpoint:
---------------------
GET http://localhost:5000/api/uploaded-papers

Expected Console:
‚úì Fetched 5 papers from MySQL

Expected Response:
[
  {
    "id": 1,
    "title": "Physics Sample Paper",
    "uploaded_by_name": "John Doe",
    ...
  }
]


Test Textbooks Endpoint:
-------------------------
GET http://localhost:5000/api/textbooks?subject=Physics

Expected Console:
‚úì Fetched 2 textbooks from MySQL
üìö Returning 2 textbooks
   - NCERT Physics: ID=1

Expected Response:
[
  {
    "id": 1,
    "title": "NCERT Physics",
    "uploaded_by_name": "Admin",
    ...
  }
]


ERROR HANDLING:
===============

Both endpoints now have comprehensive error handling:

```python
try:
    # Query logic
    return jsonify(results)
except Exception as e:
    print(f"‚ùå Error in endpoint: {e}")
    traceback.print_exc()
    return jsonify({'error': str(e)}), 500
```

This ensures:
- Detailed error messages in console
- Full stack trace for debugging
- Proper error response to frontend


SUMMARY:
========

‚úÖ Papers GET: MySQL only (needs ALL papers with user info)
‚úÖ Textbooks GET: MySQL only (needs ALL textbooks with user info)
‚úÖ Question Bank GET: Cosmos DB primary (user-specific)
‚úÖ User operations: Cosmos DB primary (single user)
‚úÖ Delete operations: Cosmos DB primary with MySQL fallback

This hybrid approach provides the best of both worlds:
- Cosmos DB for scalable, user-specific operations
- MySQL for complex queries with JOINs

Both databases work together seamlessly! üéâ
