COMPLETE COSMOS DB MIGRATION GUIDE
===================================

✅ PHASE 1: LOGIN TESTED SUCCESSFULLY
======================================

You've successfully tested:
- User authentication with Cosmos DB
- Login endpoint working
- Register endpoint working
- Test server on port 5001

✅ PHASE 2: FULL MIGRATION READY
=================================

FILES CREATED:
--------------

1. cosmos_db.py (EXTENDED)
   ✅ Users operations
   ✅ Question Bank operations
   ✅ Uploaded Papers operations
   ✅ Textbooks operations
   ✅ Usage Logs operations

2. migrate_mysql_to_cosmos.py
   - Automated migration script
   - Migrates all data from MySQL to Cosmos DB
   - Safe: Checks for existing data
   - Detailed progress reporting


PHASE 2: MIGRATE YOUR DATA
===========================

STEP 1: Backup MySQL Database (IMPORTANT!)
-------------------------------------------

mysqldump -u root -p qadam_academic > backup_$(date +%Y%m%d).sql

Or use MySQL Workbench:
- Server → Data Export
- Select qadam_academic
- Export to Self-Contained File


STEP 2: Run Migration Script
-----------------------------

python migrate_mysql_to_cosmos.py

The script will:
1. Initialize Cosmos DB containers
2. Ask for confirmation
3. Migrate users
4. Migrate uploaded papers
5. Migrate textbooks
6. Migrate question bank
7. Show summary


STEP 3: Verify Data in Cosmos DB
---------------------------------

Open Cosmos DB Emulator:
https://localhost:8081/_explorer/index.html

Check containers:
✅ users - All user accounts
✅ uploaded_papers - Question papers
✅ textbooks - Textbook files
✅ question_bank - Saved questions
✅ usage_logs - Activity logs


PHASE 3: UPDATE MAIN APP
=========================

OPTION A: Gradual Migration (RECOMMENDED)
------------------------------------------

Keep both databases running:
- MySQL for existing features
- Cosmos DB for new features
- Gradually migrate endpoints

OPTION B: Complete Switch
--------------------------

Update app.py to use Cosmos DB:

1. Import Cosmos DB functions:
   from cosmos_db import (
       get_user_by_username,
       create_user,
       save_question_to_bank,
       get_user_questions,
       ...
   )

2. Replace MySQL calls with Cosmos DB calls:

   Before (MySQL):
   conn = get_db_connection()
   cursor = conn.cursor(dictionary=True)
   cursor.execute('SELECT * FROM users WHERE username = %s', (username,))
   user = cursor.fetchone()

   After (Cosmos DB):
   user = get_user_by_username(username)

3. Update endpoints one by one
4. Test each endpoint
5. Remove MySQL dependency when complete


ENDPOINTS TO UPDATE:
====================

Authentication:
✅ /api/login - Already tested
✅ /api/register - Already tested
✅ /api/logout - No DB needed

Question Bank:
⏳ /api/question-bank (GET) - Use get_user_questions()
⏳ /api/save-solved-question (POST) - Use save_question_to_bank()
⏳ /api/question-bank/<id> (DELETE) - Use delete_question()

Uploaded Papers:
⏳ /api/uploaded-papers (GET) - Use get_user_papers()
⏳ /api/upload-paper (POST) - Use save_uploaded_paper()
⏳ /api/delete-paper/<id> (DELETE) - Use delete_paper()

Textbooks:
⏳ /api/textbooks (GET) - Use get_textbooks_by_subject()
⏳ /api/upload-textbook (POST) - Use save_textbook()
⏳ /api/delete-textbook/<id> (DELETE) - Use delete_textbook()


COSMOS DB FUNCTIONS REFERENCE:
===============================

Users:
------
create_user(username, password, full_name, email, phone, is_admin)
get_user_by_username(username)
get_user_by_id(user_id)
update_user(user_id, username, updates)
delete_user(user_id, username)
get_all_users()

Question Bank:
--------------
save_question_to_bank(user_id, question_text, solution, source, 
                      subject, paper_id, textbook_id, chapter_name, timestamp)
get_user_questions(user_id)
delete_question(question_id, user_id)

Uploaded Papers:
----------------
save_uploaded_paper(user_id, title, subject, board, year, file_path)
get_user_papers(user_id)
get_paper_by_id(paper_id)
delete_paper(paper_id, user_id)

Textbooks:
----------
save_textbook(title, subject, board, file_path, user_id)
get_textbooks_by_subject(subject)
get_textbook_by_id(textbook_id)
delete_textbook(textbook_id, subject)

Usage Logs:
-----------
log_user_activity(user_id, action_type, details)
get_user_activity_logs(user_id, limit)


EXAMPLE: UPDATE QUESTION BANK ENDPOINT
=======================================

Before (MySQL):
---------------
@app.route('/api/question-bank', methods=['GET'])
def get_question_bank():
    user_id = session.get('user_id')
    if not user_id:
        return jsonify({'error': 'User not authenticated'}), 401
    
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute('''
        SELECT * FROM question_bank
        WHERE user_id = %s
        ORDER BY created_at DESC
    ''', (user_id,))
    
    questions = cursor.fetchall()
    cursor.close()
    conn.close()
    
    return jsonify({
        'success': True,
        'questions': questions,
        'count': len(questions)
    })

After (Cosmos DB):
------------------
from cosmos_db import get_user_questions

@app.route('/api/question-bank', methods=['GET'])
def get_question_bank():
    user_id = session.get('user_id')
    if not user_id:
        return jsonify({'error': 'User not authenticated'}), 401
    
    questions = get_user_questions(user_id)
    
    return jsonify({
        'success': True,
        'questions': questions,
        'count': len(questions)
    })


KEY DIFFERENCES:
================

IDs:
----
MySQL: Auto-increment integers (1, 2, 3...)
Cosmos: UUIDs (550e8400-e29b-41d4-a716-446655440000)

Queries:
--------
MySQL: cursor.execute('SELECT * FROM users WHERE id = %s', (id,))
Cosmos: get_user_by_id(user_id)

Relationships:
--------------
MySQL: Foreign keys enforced
Cosmos: Store IDs as strings, no enforcement

Timestamps:
-----------
MySQL: DATETIME type
Cosmos: ISO 8601 strings ('2025-10-27T13:40:00Z')


TESTING CHECKLIST:
==================

After migration:

Authentication:
□ Login with existing user
□ Register new user
□ Logout

Question Bank:
□ View saved questions
□ Save new question
□ Delete question

Uploaded Papers:
□ View papers
□ Upload new paper
□ Delete paper

Textbooks:
□ View textbooks by subject
□ Upload textbook
□ Delete textbook

Single Question:
□ Parse question
□ Generate solution
□ Save to question bank

Question Paper:
□ Upload paper
□ Parse questions
□ Generate solutions

Text Book:
□ Select chapter
□ View questions
□ Generate solutions


DEPLOYMENT TO AZURE:
=====================

After local testing:

1. Create Azure Cosmos DB Account:
   - Go to Azure Portal
   - Create Cosmos DB account
   - Choose Core (SQL) API
   - Note endpoint and key

2. Update .env for Production:
   COSMOS_ENDPOINT=https://your-account.documents.azure.com:443/
   COSMOS_KEY=your_production_key
   COSMOS_DATABASE=qadam_academic

3. Run migration on production:
   python migrate_mysql_to_cosmos.py

4. Update Azure Function App settings:
   - Add COSMOS_ENDPOINT
   - Add COSMOS_KEY
   - Add COSMOS_DATABASE

5. Deploy updated app.py


ROLLBACK PLAN:
==============

If issues occur:

1. Keep MySQL running
2. Switch app.py back to MySQL
3. Restore from backup if needed:
   mysql -u root -p qadam_academic < backup_20251027.sql

4. Debug Cosmos DB issues
5. Try migration again


PERFORMANCE BENEFITS:
=====================

Cosmos DB vs MySQL:

✅ Global distribution
✅ Automatic scaling
✅ 99.999% SLA
✅ Low latency (<10ms)
✅ Flexible schema
✅ No server management
✅ Pay per usage


COST CONSIDERATIONS:
====================

Cosmos DB Pricing:
- Emulator: FREE (local development)
- Azure: Pay per RU/s (Request Units)
- Minimum: 400 RU/s = ~$24/month
- Can scale up/down as needed

MySQL:
- Local: FREE
- Azure: ~$30-100/month for small instance


NEXT STEPS:
===========

1. ✅ Login tested (DONE)
2. ⏳ Run migration script
3. ⏳ Verify data in Cosmos DB
4. ⏳ Update app.py endpoints
5. ⏳ Test all features
6. ⏳ Deploy to Azure


SUPPORT:
========

If you encounter issues:

1. Check Cosmos DB Emulator is running
2. Verify .env configuration
3. Check migration script output
4. View data in Cosmos DB Explorer
5. Test with app_cosmos.py first


READY FOR PHASE 2!
==================

Run migration:
python migrate_mysql_to_cosmos.py

This will safely migrate all your data from MySQL to Cosmos DB!
