COSMOS DB MIGRATION - LOGIN TEST
================================

STEP 1: INSTALL COSMOS DB SDK
==============================

pip install azure-cosmos==4.5.1

Or install all:
pip install -r requirements_cosmos.txt


STEP 2: START COSMOS DB EMULATOR
=================================

1. Open Azure Cosmos DB Emulator (already installed locally)
2. Wait for it to start
3. Default endpoint: https://localhost:8081
4. Default key: C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==


STEP 3: UPDATE .ENV FILE
=========================

Add these lines to backend/.env:

# Cosmos DB Configuration (Emulator)
COSMOS_ENDPOINT=https://localhost:8081
COSMOS_KEY=C2y6yDjf5/R+ob0N8A7Cgv30VRDJIWEHLM+4QDU5DE2nQ9nDuVTqobD4b8mGGyPMbIZnqyMsEcaGQy67XIw/Jw==
COSMOS_DATABASE=qadam_academic


STEP 4: START TEST SERVER
==========================

python app_cosmos.py

Server will run on: http://localhost:5001
(Different port from main app to avoid conflicts)


STEP 5: CREATE TEST USER
=========================

Method 1 - Using curl:
curl -X POST http://localhost:5001/api/test/create-user

Method 2 - Using Postman:
POST http://localhost:5001/api/test/create-user

Response:
{
  "success": true,
  "user": {
    "username": "testuser",
    "password": "test123",
    "full_name": "Test User"
  }
}


STEP 6: TEST LOGIN
==================

Method 1 - Using curl:
curl -X POST http://localhost:5001/api/login \
  -H "Content-Type: application/json" \
  -d "{\"username\":\"testuser\",\"password\":\"test123\"}"

Method 2 - Using Postman:
POST http://localhost:5001/api/login
Body (JSON):
{
  "username": "testuser",
  "password": "test123"
}

Expected Response:
{
  "success": true,
  "message": "Login successful (Cosmos DB)",
  "user": {
    "id": "...",
    "username": "testuser",
    "full_name": "Test User",
    "is_admin": false
  }
}


STEP 7: TEST REGISTER
======================

POST http://localhost:5001/api/register
Body (JSON):
{
  "username": "newuser",
  "password": "password123",
  "full_name": "New User",
  "email": "new@example.com"
}


STEP 8: VIEW DATA IN COSMOS DB EMULATOR
========================================

1. Open browser: https://localhost:8081/_explorer/index.html
2. Navigate to: qadam_academic database
3. Click on 'users' container
4. View documents (users)


WHAT'S DIFFERENT FROM MYSQL?
=============================

MySQL Structure:
- Tables with rows and columns
- Fixed schema
- SQL queries
- Auto-increment IDs

Cosmos DB Structure:
- Containers with JSON documents
- Flexible schema (NoSQL)
- SQL-like queries but on JSON
- UUID-based IDs
- Partition keys for scalability

Example Document in Cosmos DB:
{
  "id": "550e8400-e29b-41d4-a716-446655440000",
  "username": "testuser",
  "password": "test123",
  "full_name": "Test User",
  "email": "test@example.com",
  "is_active": true,
  "is_admin": false,
  "created_at": "2025-10-27T13:40:00.000Z",
  "type": "user"
}


FILES CREATED:
==============

1. cosmos_db.py - Cosmos DB operations layer
   - init_cosmos_db() - Initialize database and containers
   - create_user() - Create new user
   - get_user_by_username() - Get user for login
   - get_user_by_id() - Get user by ID
   - update_user() - Update user
   - delete_user() - Delete user

2. app_cosmos.py - Test Flask app with Cosmos DB
   - /api/login - Login endpoint (Cosmos DB)
   - /api/register - Register endpoint (Cosmos DB)
   - /api/logout - Logout endpoint
   - /api/test/create-user - Create test user

3. requirements_cosmos.txt - Cosmos DB dependencies


NEXT STEPS:
===========

After testing login successfully:
1. Migrate other tables (uploaded_papers, textbooks, etc.)
2. Update main app.py to use Cosmos DB
3. Create migration script to move existing MySQL data
4. Test all endpoints
5. Deploy to Azure with production Cosmos DB


TROUBLESHOOTING:
================

Error: "Unable to connect to Cosmos DB"
- Check if Cosmos DB Emulator is running
- Verify endpoint: https://localhost:8081
- Check SSL certificate (emulator uses self-signed cert)

Error: "Invalid credentials"
- Make sure test user was created first
- Check username/password spelling

Error: "Module not found: azure.cosmos"
- Run: pip install azure-cosmos==4.5.1


READY TO TEST!
==============

1. Start Cosmos DB Emulator
2. pip install azure-cosmos
3. python app_cosmos.py
4. POST http://localhost:5001/api/test/create-user
5. POST http://localhost:5001/api/login
